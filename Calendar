/**
1 * Author: Andre Harris
 * Date: Dec 19, 2022
 *  
 */

package calendar;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import java.util.Date;
import java.util.List;
import java.text.ParseException;
import java.text.SimpleDateFormat;

public class Calendar {
	public static String first;
	public static int firstDay = 0;
	public static int numDays = 32;
	public static Date date = new Date();
	public static int userEvent = 0;
	public static int newIndex = 0;
	
	//these use the java.util.Date command to get the current month, day, year, etc.
	public static SimpleDateFormat currentMonthYear = new SimpleDateFormat("MMMM yyyy");
	public static String monthYear = currentMonthYear.format(date);
	
	public static SimpleDateFormat currentMonth = new SimpleDateFormat("MMM");
	public static String month = currentMonth.format(date);
	
	public static SimpleDateFormat currentWholeMonth = new SimpleDateFormat("MMMM");
	public static String wholeMonth = currentMonth.format(date);
	
	
	public static SimpleDateFormat currentDay = new SimpleDateFormat("dd");
	public static String dayString = currentDay.format(date);
	public static int day = Integer.parseInt(dayString);
		
	public static SimpleDateFormat currentYear = new SimpleDateFormat("YYYY");
	public static String yearString = currentYear.format(date);
	public static int year = Integer.parseInt(yearString);
	
	public static SimpleDateFormat currentWeekdayString = new SimpleDateFormat("EEEE");
	public static String currentWeekday = currentWeekdayString.format(date);
	
	public static SimpleDateFormat currentDayString = new SimpleDateFormat("MMMM dd, yyyy");
	public static String currentMonthDayYear = currentDayString.format(date);
	
	public static ArrayList<String> days = new ArrayList <String>();
	public static ArrayList<Event> events = new ArrayList <Event>();
	
	public static void days() {
		
		
		// the program will check to see if the current year is a leap year, if so it will make the total days of February 28 or 29
		boolean leapYear = false;
		
		if (month.equals("Feb")) {
			
		if (year % 4 == 0) {
			leapYear = true;
			
			if (year % 100 == 0) {
				leapYear = false;
				
				if (year % 400 == 0) {
					leapYear = true;
				}
			}
		
		}
		}
		
		
		
		//depending on the month, it will set the total number of days
		if (month.equals("Jan")) { numDays = 31;}
		
		if (month.equals("Feb")) { 
			
			if (leapYear == true) {
				numDays = 29;
			}
			else {
				numDays = 28;
			}
			
		}
		
		
		if (month.equals("Mar")) { numDays = 31;}
		if (month.equals("Apr")) { numDays = 30;}
		if (month.equals("May")) { numDays = 31;}
		if (month.equals("Jun")) { numDays = 30;}
		if (month.equals("Jul")) { numDays = 31;}
		if (month.equals("Aug")) { numDays = 31;}
		if (month.equals("Sep")) { numDays = 30;}
		if (month.equals("Oct")) { numDays = 31;}
		if (month.equals("Nov")) { numDays = 30;}
		if (month.equals("Dec")) { numDays = 31;}
		
		
		for (int i = 1; i <= numDays; i++) {
			
			if (i <= 9) {
			days.add("  " + i);
			}
			
			if (i > 9) {
				days.add(" " + i);
				}
					
		}
		Event buffer = new Event();
		buffer.setName("Buffer");
		buffer.setDate(30);
		buffer.setNotes("Buffer");
		
		events.add(buffer);
	}
		
	public static void displayCV() {
	//  Ensures correct spacing for Calendar View
		
		int tempDay = day;
		String tempWeekday = currentWeekday;
		
		
// this section makes sure that the first day of the month starts off on the correct day of the week.
		
 if (tempDay != 01) {
  
 while (tempDay != 01) {
	 
 tempDay = tempDay - 1;
  
  if (tempWeekday.equals("Sunday")) {
  tempWeekday = "Saturday";
  }
  
  else if (tempWeekday.equals("Saturday")) {
	  tempWeekday = "Friday";
	  }
  
  else if (tempWeekday.equals("Friday")) {
	  tempWeekday = "Thursday";
	  }
  
  else if (tempWeekday.equals("Thursday")) {
	  tempWeekday = "Wednesday";
	  }
  else if (tempWeekday.equals("Wednesday")) {
	  tempWeekday = "Tuesday";
	  }
  
  else if (tempWeekday.equals("Tuesday")) {
	  tempWeekday = "Monday";
	  }
  
  else if (tempWeekday.equals("Monday")) {
	  tempWeekday = "Sunday";
	  }
	 }
  }
 
 else {
	 tempWeekday = currentWeekday;
 }
 	
		
	if (tempWeekday.equals("Sunday")) { firstDay = 0;}
	else if (tempWeekday.equals("Monday")) { firstDay = 1;}
	else if (tempWeekday.equals("Tuesday")) { firstDay = 2;}
	else if (tempWeekday.equals("Wednesday")) { firstDay = 3;}
	else if (tempWeekday.equals("Thursday")) { firstDay = 4;}
	else if (tempWeekday.equals("Friday")) { firstDay = 5;}
	else if (tempWeekday.equals("Saturday")) { firstDay = 6;}
	else {firstDay = 7;}
		
		int firstDayTemp = firstDay;
			System.out.println();
			System.out.println("CALENDAR VIEW for " + monthYear );
			System.out.println();
			System.out.printf("SUN\tMON\tTUE\tWED\tTHU\tFRI\tSAT");
			System.out.println();
			
	// Loop to make sure the first of the month is correct
			
			for (int i = 0; i < firstDay; i++) {
				System.out.printf("\t");
			}
			
			
	// CORRECT SPACING FOR DAYS OF THE WEEK AND NUMBERS ----------------------------------------------------------------
			
			
			for (int i = 0; i < days.size(); i++) {
				

				if (i <= 9) {
				System.out.printf(days.get(i) + "\t");
				
				}
				
				if (i > 9) {
					System.out.printf(days.get(i) + "\t");
				}
				
				
				if (firstDayTemp == 6) {
					System.out.printf("\n"); 
					firstDayTemp = -1;}
				++firstDayTemp;
			}
		
			
			System.out.println();
			
	}
	
	public static void displayEV() {
		System.out.println();
		
		
		// if the calendar has no events, it will tell the user
		if (events.size()==1) {
		System.out.println("There are no events in your calendar.");
		}
			
		
		
	
		else {
		System.out.println("EVENT VIEW --- Today is: " + currentMonthDayYear);
		for (int i = 1; i < events.size(); i++) {
			
			
			System.out.println();
			System.out.println("-------------------------------------------------");
			System.out.println("Event Name: " + events.get(i).getName());
			System.out.println("Event Day: " + month + " " + events.get(i).getDate()  + ", " + year);
			System.out.println("Event Notes: " + events.get(i).getNotes());
			System.out.println();
		}
		}
		
	}
	
	public static void newEvent() {
		Scanner scnr = new Scanner(System.in);
		Event event = new Event();
		
		System.out.println();
		System.out.println("What is the name of the event?");
		String eventName = scnr.nextLine();
		event.setName(eventName);
		
		
		System.out.println();
		System.out.println("When will this event occur? Please enter the day."
				+ "\nFor Example: \"7\"");
		int eventDate = scnr.nextInt();
		
		// input validation for entering a valid date
		
					while (eventDate > numDays || eventDate < 1) {
						System.out.println("Please enter a date from 1 to " + numDays + ".");
						eventDate = scnr.nextInt();
					}
					
		event.setDate(eventDate);
		
		System.out.println();
		System.out.println("Do you have any notes for this event? Leave blank if none.");
		String eventNotes;
		scnr.nextLine();
		eventNotes = scnr.nextLine();
		event.setNotes(eventNotes);
		System.out.println();
		
		System.out.println();
		System.out.println("New Event Summary: ");
		System.out.println();
		System.out.println("Event Name: " + event.getName());
		System.out.println("Event Day: " + event.getDate());
		System.out.println("Event Notes: " + event.getNotes());
		
		
		//add the ~ next to the date
		
		if (eventDate <= 9) {
		days.set(eventDate - 1, " ~" + eventDate);
		}
		
		if (eventDate > 9) {
			days.set(eventDate - 1, "~" + eventDate);
			}
		
		if (events.size() == 0){
			events.add(event);
		}
		
		else {
			
	int tempDate = eventDate;
	int newIndex = 1;
		
		for (int i = 1; i < events.size(); i++) {

			if (tempDate > events.get(i).getDate()) {
				newIndex = i+1;
			}			
		}
		events.add(newIndex, event);
	}
	}

	public static void editEvent() {
		
		int userInput = 0;
		int userEvent = 0;
		String newName = "";
		int newDate = 0;
		String newNotes = "";
		
		Scanner scnr = new Scanner(System.in);
		
		System.out.println();
		
		
		//if there are no events, the user will be redirected back to the main menu
		if (events.size()==1) {
		System.out.println();
		System.out.println("There are no events in your calendar.");
		System.out.println();
		}
		
		else {
		System.out.println();
			
		for (int i = 1; i < events.size(); i++) {
			int viewNumber = i;
			System.out.println("[" + viewNumber + "] " + events.get(i).getName());
		}
		
		System.out.println("Please select which event you would like to select: ");
		userEvent = scnr.nextInt();
		
		while (userEvent > events.size()-1 || userEvent < 1) {
			System.out.println("Please select a valid event.");
			System.out.println();
			userEvent = scnr.nextInt();
		}

		
		
		System.out.println("What would you like to change?");
		System.out.println("[1] Change Event Name");
		System.out.println("[2] Change Event Date");
		System.out.println("[3] Change Event Notes");
		userInput = scnr.nextInt();
		
		
		//input validation
		while (userInput > 3 || userInput < 1) {
			System.out.println("Please select a valid option.");
			System.out.println();
			userInput = scnr.nextInt();
		}
		
		//rename event
		if (userInput == 1) {
			System.out.println();
			System.out.print("What would you like to rename this event to?: ");
			scnr.nextLine();
			newName = scnr.nextLine();
			events.get(userEvent).setName(newName);
		}
		
		//change date of an event
		else if (userInput == 2) {
			System.out.println();
			System.out.println("When will this event occur?: ");
			newDate = scnr.nextInt();
			
			// input validation for entering a valid date
			
			while (newDate > numDays || newDate < 1) {
				System.out.println("Please enter a date from 1 to " + numDays + ".");
				newDate = scnr.nextInt();
			}
			
			//removes the ~ from the previous date
			
			if (events.get(userEvent).getDate() <= 9) {
					days.set(events.get(userEvent).getDate()-1, "  " + events.get(userEvent).getDate());
				}
				
			if (events.get(userEvent).getDate() > 9) {
					days.set(events.get(userEvent).getDate()-1, " " + events.get(userEvent).getDate());
					}
			
			//actually changes the event date
			events.get(userEvent).setDate(newDate);

			//sets the event the user is editing to the buffer
			events.set(0, events.get(userEvent));
			events.remove(userEvent);
			

			
			
			
			
			
//			organizes the event view since the date has changed	
				int newIndex = 1;
					
					for (int i = 1; i < events.size(); i++) {

						if (events.get(0).getDate() > events.get(i).getDate()) {
							newIndex = i+1;
						}			
					}
					events.add(newIndex, events.get(0));
					
			
			
			
			// sets calendar view correctly
						if (newDate <= 9) {
							days.set(newDate-1, " ~" + newDate);
							}
							
							if (newDate > 9) {
								days.set(newDate-1, "~" + newDate);
								}
			
				
			
		}
		
		//change event notes
		else if (userInput == 3) {
			System.out.println();
			System.out.println("What notes would you like to be included with this event?");
			scnr.nextLine();
			newNotes = scnr.nextLine();
			events.get(userEvent).setNotes(newNotes);
		}
		
		}
		
	}
	
	public static void deleteEvent() {
		Scanner scnr = new Scanner(System.in);
		
		if (events.size()==1) {
			System.out.println();
			System.out.println("There are no events in your calendar.");
			System.out.println();
			}
		
		else {
			System.out.println();
			
			for (int i = 1; i < events.size(); i++) {
				int viewNumber = i;
				System.out.println("[" + viewNumber + "] " + events.get(i).getName());
			}
			
			System.out.println("Please select which event you would like to select: ");
			userEvent = scnr.nextInt();
			
			while (userEvent > events.size() || userEvent < 1) {
				System.out.println("Please select a valid event.");
				System.out.println();
				userEvent = scnr.nextInt();
			}
			
			if (events.get(userEvent).getDate() <= 9) {
				days.set(events.get(userEvent).getDate()-1, "  " + events.get(userEvent).getDate());
			}
			
		if (events.get(userEvent).getDate() > 9) {
				days.set(events.get(userEvent).getDate()-1, " " + events.get(userEvent).getDate());
				}
			
			events.remove(userEvent);
		}
		
		
		
	}
	
	public static void deleteEvent (int deletedEvent) {
		
		events.remove(newIndex);
		
	}
	
	public static void run() {
		Scanner scnr = new Scanner(System.in);
		days();
		System.out.println("Welcome to your calendar!");
		displayCV();
		
// User Options -------------------------------------------------
	
		int calendarInProgress = 0;
		
		while (calendarInProgress == 0) {
			
		System.out.println();
		System.out.println();
		
		int userOption = 0;
		System.out.println("How would you like to proceed?"
				+ "\nFor Example: Type \"1\" to Create an Event.");
		
		System.out.println("[1] Create New Event");
		System.out.println("[2] Display Calendar View");
		System.out.println("[3] Display Event View");
		System.out.println("[4] Edit Event");
		System.out.println("[5] Delete Event");
		userOption = scnr.nextInt();
		
		if (userOption == 1) {
			newEvent();
		}
		
		if (userOption == 2) {
			displayCV();
		}
		
		if (userOption == 3) {
			displayEV();
		}
		
		if (userOption == 4) {
			editEvent();
		}
		
		if (userOption == 5) {
			deleteEvent();
		}
		
		
// input validation ensuring the use selects an option
		while (userOption > 3 || userOption < 1) {
			System.out.println();
			System.out.println("How would you like to proceed?"
					+ "\nFor Example: Type \"1\" to Create an Event.");
			System.out.println("[1] Create New Event");
			System.out.println("[2] Display Calendar View");
			System.out.println("[3] Display Event View");
			System.out.println("[4] Edit Event");
			System.out.println("[5] Delete Event");
			userOption = scnr.nextInt();
			if (userOption == 1) {
				newEvent();
			}
			
			if (userOption == 2) {
				displayCV();
			}
			
			if (userOption == 3) {
				displayEV();
			}
			
			if (userOption == 4) {
				editEvent();
			}
			
			if (userOption == 5) {
				deleteEvent();
			}
		}
		
		} // end of while loop
		
	} // End of Run Method

	public static void main(String[] args) {
		run();

	}

}

